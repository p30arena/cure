import 'dart:typed_data';

import 'package:cure/convert.dart';
import 'package:cure/src/core/timestamp.dart';
import 'package:test/test.dart';
import 'package:tuple/tuple.dart';

void main() {
  group('# encode options', () {
    test('# canonicalizes encoded binaries', () {
      final options = MessagePackEncodeOptions(sortKeys: true);
      final actual = messagePack.encode({'a': 1, 'b': 2}, options).toList();
      final matcher = messagePack.encode({'b': 2, 'a': 1}, options).toList();
      expect(actual, matcher);
    });
    test('# numbers in float64 wihout forceFloat32', () {
      final actual = messagePack.encode(3.14).toList();
      final matcher = [0xcb, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f];
      expect(actual, matcher);
    });
    test('# numbers in float32 when forceFloat32 = true', () {
      final options = MessagePackEncodeOptions(forceFloat32: true);
      final actual = messagePack.encode(3.14, options).toList();
      final matcher = [0xca, 0x40, 0x48, 0xf5, 0xc3];
      expect(actual, matcher);
    });
    test('# numbers in float64 with forceFloat32 = false', () {
      final options = MessagePackEncodeOptions(forceFloat32: false);
      final actual = messagePack.encode(3.14, options).toList();
      final matcher = [0xcb, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f];
      expect(actual, matcher);
    });
    test('# integers as integers without forceIntegerToFloat', () {
      final actual = messagePack.encode(3).toList();
      final matcher = [0x3];
      expect(actual, matcher);
    });
    test('# integers as floating point when forceIntegerToFloat = true', () {
      final options = MessagePackEncodeOptions(forceIntegerToFloat: true);
      final actual = messagePack.encode(3, options).toList();
      final matcher = [0xcb, 0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
      expect(actual, matcher);
    });
    test(
        '# integers as float32 when forceIntegerToFloat = true and forceFloat32 = true',
        () {
      final options = MessagePackEncodeOptions(
          forceIntegerToFloat: true, forceFloat32: true);
      final actual = messagePack.encode(3, options).toList();
      final matcher = [0xca, 0x40, 0x40, 0x00, 0x00];
      expect(actual, matcher);
    });
    test('# integers as integers when forceIntegerToFloat = false', () {
      final options = MessagePackEncodeOptions(forceIntegerToFloat: false);
      final actual = messagePack.encode(3, options).toList();
      final matcher = [0x3];
      expect(actual, matcher);
    });
  });

  final elements = {
    'nil': [
      Tuple2(
        null,
        [
          [0xc0],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
    ],
    'boolean': [
      Tuple2(
        false,
        [
          [0xc2],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        true,
        [
          [0xc3],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
    ],
    'binary': [
      Tuple2(
        Uint8List.fromList([]),
        [
          [0xc4, 0x00],
          [0xc5, 0x00, 0x00],
          [0xc6, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Uint8List.fromList([0x01]),
        [
          [0xc4, 0x01, 0x01],
          [0xc5, 0x00, 0x01, 0x01],
          [0xc6, 0x00, 0x00, 0x00, 0x01, 0x01],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Uint8List.fromList([0x00, 0xff]),
        [
          [0xc4, 0x02, 0x00, 0xff],
          [0xc5, 0x00, 0x02, 0x00, 0xff],
          [0xc6, 0x00, 0x00, 0x00, 0x02, 0x00, 0xff],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
    ],
    'int': [
      Tuple2(
        0,
        [
          [0x00],
          [0xcc, 0x00],
          [0xcd, 0x00, 0x00],
          [0xce, 0x00, 0x00, 0x00, 0x00],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
          [0xd0, 0x00],
          [0xd1, 0x00, 0x00],
          [0xd2, 0x00, 0x00, 0x00, 0x00],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
          [0xca, 0x00, 0x00, 0x00, 0x00],
          [0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        1,
        [
          [0x01],
          [0xcc, 0x01],
          [0xcd, 0x00, 0x01],
          [0xce, 0x00, 0x00, 0x00, 0x01],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
          [0xd0, 0x01],
          [0xd1, 0x00, 0x01],
          [0xd2, 0x00, 0x00, 0x00, 0x01],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
          [0xca, 0x3f, 0x80, 0x00, 0x00],
          [0xcb, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        127,
        [
          [0x7f],
          [0xcc, 0x7f],
          [0xcd, 0x00, 0x7f],
          [0xce, 0x00, 0x00, 0x00, 0x7f],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f],
          [0xd0, 0x7f],
          [0xd1, 0x00, 0x7f],
          [0xd2, 0x00, 0x00, 0x00, 0x7f],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        128,
        [
          [0xcc, 0x80],
          [0xcd, 0x00, 0x80],
          [0xce, 0x00, 0x00, 0x00, 0x80],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80],
          [0xd1, 0x00, 0x80],
          [0xd2, 0x00, 0x00, 0x00, 0x80],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        255,
        [
          [0xcc, 0xff],
          [0xcd, 0x00, 0xff],
          [0xce, 0x00, 0x00, 0x00, 0xff],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],
          [0xd1, 0x00, 0xff],
          [0xd2, 0x00, 0x00, 0x00, 0xff],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        256,
        [
          [0xcd, 0x01, 0x00],
          [0xce, 0x00, 0x00, 0x01, 0x00],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00],
          [0xd1, 0x01, 0x00],
          [0xd2, 0x00, 0x00, 0x01, 0x00],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        65535,
        [
          [0xcd, 0xff, 0xff],
          [0xce, 0x00, 0x00, 0xff, 0xff],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff],
          [0xd2, 0x00, 0x00, 0xff, 0xff],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        65536,
        [
          [0xce, 0x00, 0x01, 0x00, 0x00],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00],
          [0xd2, 0x00, 0x01, 0x00, 0x00],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        2147483647,
        [
          [0xce, 0x7f, 0xff, 0xff, 0xff],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff],
          [0xd2, 0x7f, 0xff, 0xff, 0xff],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        2147483648,
        [
          [0xce, 0x80, 0x00, 0x00, 0x00],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00],
          [0xca, 0x4f, 0x00, 0x00, 0x00],
          [0xcb, 0x41, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        4294967295,
        [
          [0xce, 0xff, 0xff, 0xff, 0xff],
          [0xcf, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff],
          [0xd3, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff],
          [0xcb, 0x41, 0xef, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -1,
        [
          [0xff],
          [0xd0, 0xff],
          [0xd1, 0xff, 0xff],
          [0xd2, 0xff, 0xff, 0xff, 0xff],
          [0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
          [0xca, 0xbf, 0x80, 0x00, 0x00],
          [0xcb, 0xbf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -32,
        [
          [0xe0],
          [0xd0, 0xe0],
          [0xd1, 0xff, 0xe0],
          [0xd2, 0xff, 0xff, 0xff, 0xe0],
          [0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0],
          [0xca, 0xc2, 0x00, 0x00, 0x00],
          [0xcb, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -33,
        [
          [0xd0, 0xdf],
          [0xd1, 0xff, 0xdf],
          [0xd2, 0xff, 0xff, 0xff, 0xdf],
          [0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -128,
        [
          [0xd0, 0x80],
          [0xd1, 0xff, 0x80],
          [0xd2, 0xff, 0xff, 0xff, 0x80],
          [0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -256,
        [
          [0xd1, 0xff, 0x00],
          [0xd2, 0xff, 0xff, 0xff, 0x00],
          [0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -32768,
        [
          [0xd1, 0x80, 0x00],
          [0xd2, 0xff, 0xff, 0x80, 0x00],
          [0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -65536,
        [
          [0xd2, 0xff, 0xff, 0x00, 0x00],
          [0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -2147483648,
        [
          [0xd2, 0x80, 0x00, 0x00, 0x00],
          [0xd3, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00],
          [0xcb, 0xc1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        4294967296,
        [
          [0xcf, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00],
          [0xd3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00],
          [0xca, 0x4f, 0x80, 0x00, 0x00],
          [0xcb, 0x41, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -4294967296,
        [
          [0xd3, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00],
          [0xcb, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        281474976710656,
        [
          [0xcf, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
          [0xd3, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
          [0xca, 0x57, 0x80, 0x00, 0x00],
          [0xcb, 0x42, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -281474976710656,
        [
          [0xd3, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
          [0xca, 0xd7, 0x80, 0x00, 0x00],
          [0xcb, 0xc2, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        9223372036854775807,
        [
          [0xcf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
          [0xd3, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -9223372036854775807,
        [
          [0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        BigInt.parse('9223372036854775808'),
        [
          [0xcf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -9223372036854775808,
        [
          [0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        BigInt.parse('18446744073709551615'),
        [
          [0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
    ],
    'float': [
      Tuple2(
        0.5,
        [
          [0xca, 0x3f, 0x00, 0x00, 0x00],
          [0xcb, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        -0.5,
        [
          [0xca, 0xbf, 0x00, 0x00, 0x00],
          [0xcb, 0xbf, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
    ],
    'string': [
      Tuple2(
        '',
        [
          [0xa0],
          [0xd9, 0x00],
          [0xda, 0x00, 0x00],
          [0xdb, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        'a',
        [
          [0xa1, 0x61],
          [0xd9, 0x01, 0x61],
          [0xda, 0x00, 0x01, 0x61],
          [0xdb, 0x00, 0x00, 0x00, 0x01, 0x61],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        '1234567890123456789012345678901',
        [
          [
            0xbf,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
          ],
          [
            0xd9,
            0x1f,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
          ],
          [
            0xda,
            0x00,
            0x1f,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        '12345678901234567890123456789012',
        [
          [
            0xd9,
            0x20,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
          ],
          [
            0xda,
            0x00,
            0x20,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
            0x33,
            0x34,
            0x35,
            0x36,
            0x37,
            0x38,
            0x39,
            0x30,
            0x31,
            0x32,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        'Кириллица',
        [
          [
            0xb2,
            0xd0,
            0x9a,
            0xd0,
            0xb8,
            0xd1,
            0x80,
            0xd0,
            0xb8,
            0xd0,
            0xbb,
            0xd0,
            0xbb,
            0xd0,
            0xb8,
            0xd1,
            0x86,
            0xd0,
            0xb0,
          ],
          [
            0xd9,
            0x12,
            0xd0,
            0x9a,
            0xd0,
            0xb8,
            0xd1,
            0x80,
            0xd0,
            0xb8,
            0xd0,
            0xbb,
            0xd0,
            0xbb,
            0xd0,
            0xb8,
            0xd1,
            0x86,
            0xd0,
            0xb0,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        'ひらがな',
        [
          [
            0xac,
            0xe3,
            0x81,
            0xb2,
            0xe3,
            0x82,
            0x89,
            0xe3,
            0x81,
            0x8c,
            0xe3,
            0x81,
            0xaa,
          ],
          [
            0xd9,
            0x0c,
            0xe3,
            0x81,
            0xb2,
            0xe3,
            0x82,
            0x89,
            0xe3,
            0x81,
            0x8c,
            0xe3,
            0x81,
            0xaa,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        '한글',
        [
          [0xa6, 0xed, 0x95, 0x9c, 0xea, 0xb8, 0x80],
          [0xd9, 0x06, 0xed, 0x95, 0x9c, 0xea, 0xb8, 0x80]
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        '汉字',
        [
          [0xa6, 0xe6, 0xb1, 0x89, 0xe5, 0xad, 0x97],
          [0xd9, 0x06, 0xe6, 0xb1, 0x89, 0xe5, 0xad, 0x97],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        '漢字',
        [
          [0xa6, 0xe6, 0xbc, 0xa2, 0xe5, 0xad, 0x97],
          [0xd9, 0x06, 0xe6, 0xbc, 0xa2, 0xe5, 0xad, 0x97],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        '❤',
        [
          [0xa3, 0xe2, 0x9d, 0xa4],
          [0xd9, 0x03, 0xe2, 0x9d, 0xa4],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        '🍺',
        [
          [0xa4, 0xf0, 0x9f, 0x8d, 0xba],
          [0xd9, 0x04, 0xf0, 0x9f, 0x8d, 0xba],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
    ],
    'array': [
      Tuple2(
        [],
        [
          [0x90],
          [0xdc, 0x00, 0x00],
          [0xdd, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        [1],
        [
          [0x91, 0x01],
          [0xdc, 0x00, 0x01, 0x01],
          [0xdd, 0x00, 0x00, 0x00, 0x01, 0x01],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        [
          [
            0x9f,
            0x01,
            0x02,
            0x03,
            0x04,
            0x05,
            0x06,
            0x07,
            0x08,
            0x09,
            0x0a,
            0x0b,
            0x0c,
            0x0d,
            0x0e,
            0x0f,
          ],
          [
            0xdc,
            0x00,
            0x0f,
            0x01,
            0x02,
            0x03,
            0x04,
            0x05,
            0x06,
            0x07,
            0x08,
            0x09,
            0x0a,
            0x0b,
            0x0c,
            0x0d,
            0x0e,
            0x0f,
          ],
          [
            0xdd,
            0x00,
            0x00,
            0x00,
            0x0f,
            0x01,
            0x02,
            0x03,
            0x04,
            0x05,
            0x06,
            0x07,
            0x08,
            0x09,
            0x0a,
            0x0b,
            0x0c,
            0x0d,
            0x0e,
            0x0f,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
        [
          [
            0xdc,
            0x00,
            0x10,
            0x01,
            0x02,
            0x03,
            0x04,
            0x05,
            0x06,
            0x07,
            0x08,
            0x09,
            0x0a,
            0x0b,
            0x0c,
            0x0d,
            0x0e,
            0x0f,
            0x10,
          ],
          [
            0xdd,
            0x00,
            0x00,
            0x00,
            0x10,
            0x01,
            0x02,
            0x03,
            0x04,
            0x05,
            0x06,
            0x07,
            0x08,
            0x09,
            0x0a,
            0x0b,
            0x0c,
            0x0d,
            0x0e,
            0x0f,
            0x10,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        ['a'],
        [
          [0x91, 0xa1, 0x61],
          [0xdc, 0x00, 0x01, 0xa1, 0x61],
          [0xdd, 0x00, 0x00, 0x00, 0x01, 0xa1, 0x61],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
    ],
    'map': [
      Tuple2(
        {},
        [
          [0x80],
          [0xde, 0x00, 0x00],
          [0xdf, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        {'a': 1},
        [
          [0x81, 0xa1, 0x61, 0x01],
          [0xde, 0x00, 0x01, 0xa1, 0x61, 0x01],
          [0xdf, 0x00, 0x00, 0x00, 0x01, 0xa1, 0x61, 0x01],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        {'a': 'A'},
        [
          [0x81, 0xa1, 0x61, 0xa1, 0x41],
          [0xde, 0x00, 0x01, 0xa1, 0x61, 0xa1, 0x41],
          [0xdf, 0x00, 0x00, 0x00, 0x01, 0xa1, 0x61, 0xa1, 0x41],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
    ],
    'nested': [
      Tuple2(
        [[]],
        [
          [0x91, 0x90],
          [0xdc, 0x00, 0x01, 0xdc, 0x00, 0x00],
          [0xdd, 0x00, 0x00, 0x00, 0x01, 0xdd, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        [{}],
        [
          [0x91, 0x80],
          [0xdc, 0x00, 0x01, 0x80],
          [0xdd, 0x00, 0x00, 0x00, 0x01, 0x80],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        {'a': {}},
        [
          [0x81, 0xa1, 0x61, 0x80],
          [0xde, 0x00, 0x01, 0xa1, 0x61, 0xde, 0x00, 0x00],
          [
            0xdf,
            0x00,
            0x00,
            0x00,
            0x01,
            0xa1,
            0x61,
            0xdf,
            0x00,
            0x00,
            0x00,
            0x00,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        {'a': []},
        [
          [0x81, 0xa1, 0x61, 0x90],
          [0xde, 0x00, 0x01, 0xa1, 0x61, 0x90],
          [0xdf, 0x00, 0x00, 0x00, 0x01, 0xa1, 0x61, 0x90],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
    ],
    'timestamp': [
      Tuple2(
        Timestamp(1514862245, 0),
        [
          [0xd6, 0xff, 0x5a, 0x4a, 0xf6, 0xa5],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(1514862245, 678901234),
        [
          [0xd7, 0xff, 0xa1, 0xdc, 0xd7, 0xc8, 0x5a, 0x4a, 0xf6, 0xa5],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(2147483647, 999999999),
        [
          [0xd7, 0xff, 0xee, 0x6b, 0x27, 0xfc, 0x7f, 0xff, 0xff, 0xff],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(2147483648, 0),
        [
          [0xd6, 0xff, 0x80, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(2147483648, 1),
        [
          [0xd7, 0xff, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(4294967295, 0),
        [
          [0xd6, 0xff, 0xff, 0xff, 0xff, 0xff],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(4294967295, 999999999),
        [
          [0xd7, 0xff, 0xee, 0x6b, 0x27, 0xfc, 0xff, 0xff, 0xff, 0xff],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(4294967296, 0),
        [
          [0xd7, 0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(17179869183, 999999999),
        [
          [0xd7, 0xff, 0xee, 0x6b, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(17179869184, 0),
        [
          [
            0xc7,
            0x0c,
            0xff,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x04,
            0x00,
            0x00,
            0x00,
            0x00,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(-1, 0),
        [
          [
            0xc7,
            0x0c,
            0xff,
            0x00,
            0x00,
            0x00,
            0x00,
            0xff,
            0xff,
            0xff,
            0xff,
            0xff,
            0xff,
            0xff,
            0xff,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(-1, 999999999),
        [
          [
            0xc7,
            0x0c,
            0xff,
            0x3b,
            0x9a,
            0xc9,
            0xff,
            0xff,
            0xff,
            0xff,
            0xff,
            0xff,
            0xff,
            0xff,
            0xff,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(0, 0),
        [
          [0xd6, 0xff, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(0, 1),
        [
          [0xd7, 0xff, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(1, 0),
        [
          [0xd6, 0xff, 0x00, 0x00, 0x00, 0x01],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(-2208988801, 999999999),
        [
          [
            0xc7,
            0x0c,
            0xff,
            0x3b,
            0x9a,
            0xc9,
            0xff,
            0xff,
            0xff,
            0xff,
            0xff,
            0x7c,
            0x55,
            0x81,
            0x7f,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(-2208988800, 0),
        [
          [
            0xc7,
            0x0c,
            0xff,
            0x00,
            0x00,
            0x00,
            0x00,
            0xff,
            0xff,
            0xff,
            0xff,
            0x7c,
            0x55,
            0x81,
            0x80,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(-62167219200, 0),
        [
          [
            0xc7,
            0x0c,
            0xff,
            0x00,
            0x00,
            0x00,
            0x00,
            0xff,
            0xff,
            0xff,
            0xf1,
            0x86,
            0x8b,
            0x84,
            0x00,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
      Tuple2(
        Timestamp(253402300799, 999999999),
        [
          [
            0xc7,
            0x0c,
            0xff,
            0x3b,
            0x9a,
            0xc9,
            0xff,
            0x00,
            0x00,
            0x00,
            0x3a,
            0xff,
            0xf4,
            0x41,
            0x7f,
          ],
        ].map((e) => Uint8List.fromList(e)).toList(),
      ),
    ]
  };

  group('# encode', () {
    for (var entry in elements.entries) {
      group('# ${entry.key}', () {
        for (var element in entry.value) {
          test('# ${element.item1}', () {
            final data = messagePack.encode(element.item1);
            final matcher = anyElement(data);
            expect(element.item2, matcher);
          });
        }
      });
    }
  });
  group('# decode', () {
    for (var entry in elements.entries) {
      group('# ${entry.key}', () {
        for (var element in entry.value) {
          for (var item in element.item2) {
            test('# $item', () {
              final actual = messagePack.decode(item);
              final matcher = element.item1;
              expect(actual, matcher);
            });
          }
        }
      });
    }
  });

  final specs = {
    'FLOAT64_POSITIVE_INF': double.infinity,
    'FLOAT64_NEGATIVE_INF': double.negativeInfinity,
    'STR16': 'a' * 0x100,
    'STR16_MBS': '🌏' * 0x100,
    'STR32': 'b' * 0x10000,
    'STR32_MBS': '🍣' * 0X10000,
    'STR32LARGE': 'c' * 0x50000,
    'STR_INCLUDING_NUL': 'foo\0bar\0',
    'STR_BROKEN_FF': '\xff',
    'BIN16': Uint8List.fromList(List.filled(0x100, 0xff)),
    'BIN32': Uint8List.fromList(List.filled(0x10000, 0xff)),
    'BIN32LARGE': Uint8List.fromList(List.filled(0x50000, 0xff)),
    'ARRAY16': List.filled(0x100, true),
    'ARRAY32': List.filled(0x10000, true),
    'MAP16': Map.fromIterables(
      List.generate(0x100, (i) => 'k$i'),
      List.filled(0x100, null),
    ),
    'MAP32': Map.fromIterables(
      List.generate(0x10000, (i) => 'k$i'),
      List.filled(0x10000, null),
    ),
    'MIXED': List.filled(0x10, 9007199254740991),
  };

  for (var entry in specs.entries) {
    final name = entry.key;
    final matcher = entry.value;
    test('# encodes and decodes $name', () {
      final source = messagePack.encode(matcher);
      final actual = messagePack.decode(source);
      expect(actual, matcher);
    });
  }

  test('# encode and decode NAN', () {
    final source = messagePack.encode(double.nan);
    final obj = messagePack.decode(source);
    expect(obj, isNaN);
  });
}
