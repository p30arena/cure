import 'dart:convert';
import 'dart:io';

import 'package:cure/convert.dart';

HttpServer _server;

String get serverUrl => 'http://localhost:${_server.port}';

Future<void> startServer() async {
  _server = await HttpServer.bind('localhost', 0)
    ..listen((request) async {
      final response = request.response;
      switch (request.uri.path) {
        case '/error':
          {
            response
              ..statusCode = 400
              ..contentLength = 0;
            await response.close();
            break;
          }
        case '/loop':
          {
            final n = int.parse(request.uri.query);
            response
              ..statusCode = 302
              ..headers.set('location', '$serverUrl/loop?${n + 1}')
              ..contentLength = 0;
            await response.close();
            break;
          }
        case '/redirect':
          {
            response
              ..statusCode = 302
              ..headers.set('location', '$serverUrl/')
              ..contentLength = 0;
            await response.close();
            break;
          }
        case 'no-content-length':
          {
            response
              ..statusCode = 200
              ..contentLength = -1
              ..write('content');
            await response.close();
            break;
          }
        default:
          {
            response.headers.contentType = ContentType.json;
            response.headers.set('single', 'value');
            final charset = request.headers.contentType?.charset;
            final encoding =
                charset == null ? utf8 : Encoding.getByName(charset);
            final content = await encoding.decodeStream(request);
            final headers = {};
            request.headers.forEach((key, values) {
              if (key == 'cookie' || key == 'host') {
                // These headers are automatically generated by dart:io, so we don't
                // want to test them here.
                return;
              }
              headers[key] = values;
            });
            final obj = {
              'method': request.method,
              'path': request.uri.path,
              'headers': headers,
            };
            if (content.isNotEmpty) {
              obj['content'] = content;
            }
            final content1 = json.encode(obj);
            response
              ..contentLength = content1.length
              ..write(content1);
            await response.close();
            break;
          }
      }
    });
}

void stopServer() {
  if (_server != null) {
    _server.close();
    _server = null;
  }
}
